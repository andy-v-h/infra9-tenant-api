// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuers)
	t.Run("ServiceAccounts", testServiceAccounts)
	t.Run("Tenants", testTenants)
	t.Run("Tokens", testTokens)
	t.Run("Users", testUsers)
}

func TestSoftDelete(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersSoftDelete)
	t.Run("ServiceAccounts", testServiceAccountsSoftDelete)
	t.Run("Tenants", testTenantsSoftDelete)
	t.Run("Tokens", testTokensSoftDelete)
	t.Run("Users", testUsersSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersQuerySoftDeleteAll)
	t.Run("ServiceAccounts", testServiceAccountsQuerySoftDeleteAll)
	t.Run("Tenants", testTenantsQuerySoftDeleteAll)
	t.Run("Tokens", testTokensQuerySoftDeleteAll)
	t.Run("Users", testUsersQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersSliceSoftDeleteAll)
	t.Run("ServiceAccounts", testServiceAccountsSliceSoftDeleteAll)
	t.Run("Tenants", testTenantsSliceSoftDeleteAll)
	t.Run("Tokens", testTokensSliceSoftDeleteAll)
	t.Run("Users", testUsersSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersDelete)
	t.Run("ServiceAccounts", testServiceAccountsDelete)
	t.Run("Tenants", testTenantsDelete)
	t.Run("Tokens", testTokensDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersQueryDeleteAll)
	t.Run("ServiceAccounts", testServiceAccountsQueryDeleteAll)
	t.Run("Tenants", testTenantsQueryDeleteAll)
	t.Run("Tokens", testTokensQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersSliceDeleteAll)
	t.Run("ServiceAccounts", testServiceAccountsSliceDeleteAll)
	t.Run("Tenants", testTenantsSliceDeleteAll)
	t.Run("Tokens", testTokensSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersExists)
	t.Run("ServiceAccounts", testServiceAccountsExists)
	t.Run("Tenants", testTenantsExists)
	t.Run("Tokens", testTokensExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersFind)
	t.Run("ServiceAccounts", testServiceAccountsFind)
	t.Run("Tenants", testTenantsFind)
	t.Run("Tokens", testTokensFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersBind)
	t.Run("ServiceAccounts", testServiceAccountsBind)
	t.Run("Tenants", testTenantsBind)
	t.Run("Tokens", testTokensBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersOne)
	t.Run("ServiceAccounts", testServiceAccountsOne)
	t.Run("Tenants", testTenantsOne)
	t.Run("Tokens", testTokensOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersAll)
	t.Run("ServiceAccounts", testServiceAccountsAll)
	t.Run("Tenants", testTenantsAll)
	t.Run("Tokens", testTokensAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersCount)
	t.Run("ServiceAccounts", testServiceAccountsCount)
	t.Run("Tenants", testTenantsCount)
	t.Run("Tokens", testTokensCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersHooks)
	t.Run("ServiceAccounts", testServiceAccountsHooks)
	t.Run("Tenants", testTenantsHooks)
	t.Run("Tokens", testTokensHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersInsert)
	t.Run("OidcIssuers", testOidcIssuersInsertWhitelist)
	t.Run("ServiceAccounts", testServiceAccountsInsert)
	t.Run("ServiceAccounts", testServiceAccountsInsertWhitelist)
	t.Run("Tenants", testTenantsInsert)
	t.Run("Tenants", testTenantsInsertWhitelist)
	t.Run("Tokens", testTokensInsert)
	t.Run("Tokens", testTokensInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("OidcIssuerToTenantUsingTenant", testOidcIssuerToOneTenantUsingTenant)
	t.Run("ServiceAccountToTenantUsingTenant", testServiceAccountToOneTenantUsingTenant)
	t.Run("TenantToTenantUsingParentTenant", testTenantToOneTenantUsingParentTenant)
	t.Run("UserToOidcIssuerUsingOidcIssuer", testUserToOneOidcIssuerUsingOidcIssuer)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("OidcIssuerToUsers", testOidcIssuerToManyUsers)
	t.Run("TenantToOidcIssuers", testTenantToManyOidcIssuers)
	t.Run("TenantToServiceAccounts", testTenantToManyServiceAccounts)
	t.Run("TenantToParentTenantTenants", testTenantToManyParentTenantTenants)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("OidcIssuerToTenantUsingOidcIssuers", testOidcIssuerToOneSetOpTenantUsingTenant)
	t.Run("ServiceAccountToTenantUsingServiceAccounts", testServiceAccountToOneSetOpTenantUsingTenant)
	t.Run("TenantToTenantUsingParentTenantTenants", testTenantToOneSetOpTenantUsingParentTenant)
	t.Run("UserToOidcIssuerUsingUsers", testUserToOneSetOpOidcIssuerUsingOidcIssuer)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ServiceAccountToTenantUsingServiceAccounts", testServiceAccountToOneRemoveOpTenantUsingTenant)
	t.Run("TenantToTenantUsingParentTenantTenants", testTenantToOneRemoveOpTenantUsingParentTenant)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("OidcIssuerToUsers", testOidcIssuerToManyAddOpUsers)
	t.Run("TenantToOidcIssuers", testTenantToManyAddOpOidcIssuers)
	t.Run("TenantToServiceAccounts", testTenantToManyAddOpServiceAccounts)
	t.Run("TenantToParentTenantTenants", testTenantToManyAddOpParentTenantTenants)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("TenantToServiceAccounts", testTenantToManySetOpServiceAccounts)
	t.Run("TenantToParentTenantTenants", testTenantToManySetOpParentTenantTenants)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("TenantToServiceAccounts", testTenantToManyRemoveOpServiceAccounts)
	t.Run("TenantToParentTenantTenants", testTenantToManyRemoveOpParentTenantTenants)
}

func TestReload(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersReload)
	t.Run("ServiceAccounts", testServiceAccountsReload)
	t.Run("Tenants", testTenantsReload)
	t.Run("Tokens", testTokensReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersReloadAll)
	t.Run("ServiceAccounts", testServiceAccountsReloadAll)
	t.Run("Tenants", testTenantsReloadAll)
	t.Run("Tokens", testTokensReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersSelect)
	t.Run("ServiceAccounts", testServiceAccountsSelect)
	t.Run("Tenants", testTenantsSelect)
	t.Run("Tokens", testTokensSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersUpdate)
	t.Run("ServiceAccounts", testServiceAccountsUpdate)
	t.Run("Tenants", testTenantsUpdate)
	t.Run("Tokens", testTokensUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("OidcIssuers", testOidcIssuersSliceUpdateAll)
	t.Run("ServiceAccounts", testServiceAccountsSliceUpdateAll)
	t.Run("Tenants", testTenantsSliceUpdateAll)
	t.Run("Tokens", testTokensSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
