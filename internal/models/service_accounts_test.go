// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testServiceAccountsUpsert(t *testing.T) {
	t.Parallel()

	if len(serviceAccountAllColumns) == len(serviceAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServiceAccount{}
	if err = randomize.Struct(seed, &o, serviceAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceAccount: %s", err)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serviceAccountDBTypes, false, serviceAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceAccount: %s", err)
	}

	count, err = ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServiceAccounts(t *testing.T) {
	t.Parallel()

	query := ServiceAccounts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServiceAccountsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceAccountsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServiceAccounts().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceAccountsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceAccountSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceAccountsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceAccountsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServiceAccounts().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceAccountsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceAccountSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceAccountsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServiceAccountExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServiceAccount exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServiceAccountExists to return true, but got false.")
	}
}

func testServiceAccountsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serviceAccountFound, err := FindServiceAccount(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serviceAccountFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServiceAccountsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServiceAccounts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServiceAccountsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServiceAccounts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServiceAccountsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serviceAccountOne := &ServiceAccount{}
	serviceAccountTwo := &ServiceAccount{}
	if err = randomize.Struct(seed, serviceAccountOne, serviceAccountDBTypes, false, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceAccountTwo, serviceAccountDBTypes, false, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServiceAccountsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serviceAccountOne := &ServiceAccount{}
	serviceAccountTwo := &ServiceAccount{}
	if err = randomize.Struct(seed, serviceAccountOne, serviceAccountDBTypes, false, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceAccountTwo, serviceAccountDBTypes, false, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serviceAccountBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func serviceAccountAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceAccount) error {
	*o = ServiceAccount{}
	return nil
}

func testServiceAccountsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServiceAccount{}
	o := &ServiceAccount{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceAccount object: %s", err)
	}

	AddServiceAccountHook(boil.BeforeInsertHook, serviceAccountBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serviceAccountBeforeInsertHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.AfterInsertHook, serviceAccountAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serviceAccountAfterInsertHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.AfterSelectHook, serviceAccountAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serviceAccountAfterSelectHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.BeforeUpdateHook, serviceAccountBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serviceAccountBeforeUpdateHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.AfterUpdateHook, serviceAccountAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serviceAccountAfterUpdateHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.BeforeDeleteHook, serviceAccountBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serviceAccountBeforeDeleteHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.AfterDeleteHook, serviceAccountAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serviceAccountAfterDeleteHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.BeforeUpsertHook, serviceAccountBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serviceAccountBeforeUpsertHooks = []ServiceAccountHook{}

	AddServiceAccountHook(boil.AfterUpsertHook, serviceAccountAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serviceAccountAfterUpsertHooks = []ServiceAccountHook{}
}

func testServiceAccountsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceAccountsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serviceAccountColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceAccountToOneTenantUsingTenant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceAccount
	var foreign Tenant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TenantID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tenant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServiceAccountSlice{&local}
	if err = local.L.LoadTenant(ctx, tx, false, (*[]*ServiceAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tenant = nil
	if err = local.L.LoadTenant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceAccountToOneSetOpTenantUsingTenant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceAccount
	var b, c Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceAccountDBTypes, false, strmangle.SetComplement(serviceAccountPrimaryKeyColumns, serviceAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tenant{&b, &c} {
		err = a.SetTenant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tenant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServiceAccounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TenantID, x.ID) {
			t.Error("foreign key was wrong value", a.TenantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TenantID))
		reflect.Indirect(reflect.ValueOf(&a.TenantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TenantID, x.ID) {
			t.Error("foreign key was wrong value", a.TenantID, x.ID)
		}
	}
}

func testServiceAccountToOneRemoveOpTenantUsingTenant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceAccount
	var b Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceAccountDBTypes, false, strmangle.SetComplement(serviceAccountPrimaryKeyColumns, serviceAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTenant(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTenant(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Tenant().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Tenant != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TenantID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ServiceAccounts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testServiceAccountsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceAccountsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceAccountSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceAccountsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serviceAccountDBTypes = map[string]string{`ID`: `uuid`, `Name`: `string`, `TenantID`: `uuid`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `DeletedAt`: `timestamptz`}
	_                     = bytes.MinRead
)

func testServiceAccountsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serviceAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serviceAccountAllColumns) == len(serviceAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServiceAccountsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serviceAccountAllColumns) == len(serviceAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceAccount{}
	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceAccountDBTypes, true, serviceAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceAccount struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serviceAccountAllColumns, serviceAccountPrimaryKeyColumns) {
		fields = serviceAccountAllColumns
	} else {
		fields = strmangle.SetComplement(
			serviceAccountAllColumns,
			serviceAccountPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServiceAccountSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
