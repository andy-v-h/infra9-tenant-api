// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testTenantsUpsert(t *testing.T) {
	t.Parallel()

	if len(tenantAllColumns) == len(tenantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Tenant{}
	if err = randomize.Struct(seed, &o, tenantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tenant: %s", err)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tenantDBTypes, false, tenantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tenant: %s", err)
	}

	count, err = Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTenants(t *testing.T) {
	t.Parallel()

	query := Tenants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTenantsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tenants().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TenantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tenants().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TenantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TenantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Tenant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TenantExists to return true, but got false.")
	}
}

func testTenantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tenantFound, err := FindTenant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tenantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTenantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tenants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTenantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tenants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTenantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenantOne := &Tenant{}
	tenantTwo := &Tenant{}
	if err = randomize.Struct(seed, tenantOne, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}
	if err = randomize.Struct(seed, tenantTwo, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tenantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tenantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tenants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTenantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tenantOne := &Tenant{}
	tenantTwo := &Tenant{}
	if err = randomize.Struct(seed, tenantOne, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}
	if err = randomize.Struct(seed, tenantTwo, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tenantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tenantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tenantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func testTenantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Tenant{}
	o := &Tenant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tenantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tenant object: %s", err)
	}

	AddTenantHook(boil.BeforeInsertHook, tenantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tenantBeforeInsertHooks = []TenantHook{}

	AddTenantHook(boil.AfterInsertHook, tenantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tenantAfterInsertHooks = []TenantHook{}

	AddTenantHook(boil.AfterSelectHook, tenantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tenantAfterSelectHooks = []TenantHook{}

	AddTenantHook(boil.BeforeUpdateHook, tenantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tenantBeforeUpdateHooks = []TenantHook{}

	AddTenantHook(boil.AfterUpdateHook, tenantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tenantAfterUpdateHooks = []TenantHook{}

	AddTenantHook(boil.BeforeDeleteHook, tenantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tenantBeforeDeleteHooks = []TenantHook{}

	AddTenantHook(boil.AfterDeleteHook, tenantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tenantAfterDeleteHooks = []TenantHook{}

	AddTenantHook(boil.BeforeUpsertHook, tenantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tenantBeforeUpsertHooks = []TenantHook{}

	AddTenantHook(boil.AfterUpsertHook, tenantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tenantAfterUpsertHooks = []TenantHook{}
}

func testTenantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTenantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tenantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTenantToManyOidcIssuers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c OidcIssuer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, oidcIssuerDBTypes, false, oidcIssuerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, oidcIssuerDBTypes, false, oidcIssuerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TenantID = a.ID
	c.TenantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OidcIssuers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TenantID == b.TenantID {
			bFound = true
		}
		if v.TenantID == c.TenantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TenantSlice{&a}
	if err = a.L.LoadOidcIssuers(ctx, tx, false, (*[]*Tenant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OidcIssuers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OidcIssuers = nil
	if err = a.L.LoadOidcIssuers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OidcIssuers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTenantToManyServiceAccounts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c ServiceAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceAccountDBTypes, false, serviceAccountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceAccountDBTypes, false, serviceAccountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TenantID, a.ID)
	queries.Assign(&c.TenantID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceAccounts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TenantID, b.TenantID) {
			bFound = true
		}
		if queries.Equal(v.TenantID, c.TenantID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TenantSlice{&a}
	if err = a.L.LoadServiceAccounts(ctx, tx, false, (*[]*Tenant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceAccounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceAccounts = nil
	if err = a.L.LoadServiceAccounts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceAccounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTenantToManyParentTenantTenants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ParentTenantID, a.ID)
	queries.Assign(&c.ParentTenantID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentTenantTenants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ParentTenantID, b.ParentTenantID) {
			bFound = true
		}
		if queries.Equal(v.ParentTenantID, c.ParentTenantID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TenantSlice{&a}
	if err = a.L.LoadParentTenantTenants(ctx, tx, false, (*[]*Tenant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentTenantTenants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentTenantTenants = nil
	if err = a.L.LoadParentTenantTenants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentTenantTenants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTenantToManyAddOpOidcIssuers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c, d, e OidcIssuer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OidcIssuer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, oidcIssuerDBTypes, false, strmangle.SetComplement(oidcIssuerPrimaryKeyColumns, oidcIssuerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OidcIssuer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOidcIssuers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TenantID {
			t.Error("foreign key was wrong value", a.ID, first.TenantID)
		}
		if a.ID != second.TenantID {
			t.Error("foreign key was wrong value", a.ID, second.TenantID)
		}

		if first.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OidcIssuers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OidcIssuers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OidcIssuers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTenantToManyAddOpServiceAccounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c, d, e ServiceAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceAccount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceAccountDBTypes, false, strmangle.SetComplement(serviceAccountPrimaryKeyColumns, serviceAccountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceAccount{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceAccounts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TenantID) {
			t.Error("foreign key was wrong value", a.ID, first.TenantID)
		}
		if !queries.Equal(a.ID, second.TenantID) {
			t.Error("foreign key was wrong value", a.ID, second.TenantID)
		}

		if first.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceAccounts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceAccounts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceAccounts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTenantToManySetOpServiceAccounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c, d, e ServiceAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceAccount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceAccountDBTypes, false, strmangle.SetComplement(serviceAccountPrimaryKeyColumns, serviceAccountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetServiceAccounts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetServiceAccounts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TenantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TenantID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TenantID) {
		t.Error("foreign key was wrong value", a.ID, d.TenantID)
	}
	if !queries.Equal(a.ID, e.TenantID) {
		t.Error("foreign key was wrong value", a.ID, e.TenantID)
	}

	if b.R.Tenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Tenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Tenant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Tenant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ServiceAccounts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ServiceAccounts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTenantToManyRemoveOpServiceAccounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c, d, e ServiceAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceAccount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceAccountDBTypes, false, strmangle.SetComplement(serviceAccountPrimaryKeyColumns, serviceAccountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddServiceAccounts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveServiceAccounts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceAccounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TenantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TenantID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Tenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Tenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Tenant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Tenant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ServiceAccounts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ServiceAccounts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ServiceAccounts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTenantToManyAddOpParentTenantTenants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c, d, e Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tenant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tenant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentTenantTenants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ParentTenantID) {
			t.Error("foreign key was wrong value", a.ID, first.ParentTenantID)
		}
		if !queries.Equal(a.ID, second.ParentTenantID) {
			t.Error("foreign key was wrong value", a.ID, second.ParentTenantID)
		}

		if first.R.ParentTenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ParentTenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentTenantTenants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentTenantTenants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentTenantTenants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTenantToManySetOpParentTenantTenants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c, d, e Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tenant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentTenantTenants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentTenantTenants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentTenantTenants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentTenantTenants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentTenantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentTenantID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ParentTenantID) {
		t.Error("foreign key was wrong value", a.ID, d.ParentTenantID)
	}
	if !queries.Equal(a.ID, e.ParentTenantID) {
		t.Error("foreign key was wrong value", a.ID, e.ParentTenantID)
	}

	if b.R.ParentTenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentTenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentTenant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ParentTenant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentTenantTenants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentTenantTenants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTenantToManyRemoveOpParentTenantTenants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c, d, e Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tenant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentTenantTenants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentTenantTenants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentTenantTenants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentTenantTenants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentTenantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentTenantID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ParentTenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentTenant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentTenant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ParentTenant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentTenantTenants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentTenantTenants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentTenantTenants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTenantToOneTenantUsingParentTenant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tenant
	var foreign Tenant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ParentTenantID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentTenant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TenantSlice{&local}
	if err = local.L.LoadParentTenant(ctx, tx, false, (*[]*Tenant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentTenant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentTenant = nil
	if err = local.L.LoadParentTenant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentTenant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTenantToOneSetOpTenantUsingParentTenant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b, c Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tenant{&b, &c} {
		err = a.SetParentTenant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentTenant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentTenantTenants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ParentTenantID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentTenantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentTenantID))
		reflect.Indirect(reflect.ValueOf(&a.ParentTenantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ParentTenantID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentTenantID, x.ID)
		}
	}
}

func testTenantToOneRemoveOpTenantUsingParentTenant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tenant
	var b Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParentTenant(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParentTenant(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ParentTenant().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ParentTenant != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ParentTenantID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentTenantTenants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTenantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTenantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TenantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTenantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tenants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tenantDBTypes = map[string]string{`ID`: `uuid`, `Name`: `string`, `ParentTenantID`: `uuid`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `DeletedAt`: `timestamptz`}
	_             = bytes.MinRead
)

func testTenantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tenantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tenantAllColumns) == len(tenantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTenantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tenantAllColumns) == len(tenantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tenant{}
	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tenants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tenantDBTypes, true, tenantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tenantAllColumns, tenantPrimaryKeyColumns) {
		fields = tenantAllColumns
	} else {
		fields = strmangle.SetComplement(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TenantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
