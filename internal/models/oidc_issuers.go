// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OidcIssuer is an object representing the database table.
type OidcIssuer struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	TenantID     string    `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	URI          string    `boil:"uri" json:"uri" toml:"uri" yaml:"uri"`
	Audience     string    `boil:"audience" json:"audience" toml:"audience" yaml:"audience"`
	ClientID     string    `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	SubjectClaim string    `boil:"subject_claim" json:"subject_claim" toml:"subject_claim" yaml:"subject_claim"`
	EmailClaim   string    `boil:"email_claim" json:"email_claim" toml:"email_claim" yaml:"email_claim"`
	NameClaim    string    `boil:"name_claim" json:"name_claim" toml:"name_claim" yaml:"name_claim"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *oidcIssuerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oidcIssuerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OidcIssuerColumns = struct {
	ID           string
	Name         string
	TenantID     string
	URI          string
	Audience     string
	ClientID     string
	SubjectClaim string
	EmailClaim   string
	NameClaim    string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	Name:         "name",
	TenantID:     "tenant_id",
	URI:          "uri",
	Audience:     "audience",
	ClientID:     "client_id",
	SubjectClaim: "subject_claim",
	EmailClaim:   "email_claim",
	NameClaim:    "name_claim",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

var OidcIssuerTableColumns = struct {
	ID           string
	Name         string
	TenantID     string
	URI          string
	Audience     string
	ClientID     string
	SubjectClaim string
	EmailClaim   string
	NameClaim    string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "oidc_issuers.id",
	Name:         "oidc_issuers.name",
	TenantID:     "oidc_issuers.tenant_id",
	URI:          "oidc_issuers.uri",
	Audience:     "oidc_issuers.audience",
	ClientID:     "oidc_issuers.client_id",
	SubjectClaim: "oidc_issuers.subject_claim",
	EmailClaim:   "oidc_issuers.email_claim",
	NameClaim:    "oidc_issuers.name_claim",
	CreatedAt:    "oidc_issuers.created_at",
	UpdatedAt:    "oidc_issuers.updated_at",
	DeletedAt:    "oidc_issuers.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OidcIssuerWhere = struct {
	ID           whereHelperstring
	Name         whereHelperstring
	TenantID     whereHelperstring
	URI          whereHelperstring
	Audience     whereHelperstring
	ClientID     whereHelperstring
	SubjectClaim whereHelperstring
	EmailClaim   whereHelperstring
	NameClaim    whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "\"oidc_issuers\".\"id\""},
	Name:         whereHelperstring{field: "\"oidc_issuers\".\"name\""},
	TenantID:     whereHelperstring{field: "\"oidc_issuers\".\"tenant_id\""},
	URI:          whereHelperstring{field: "\"oidc_issuers\".\"uri\""},
	Audience:     whereHelperstring{field: "\"oidc_issuers\".\"audience\""},
	ClientID:     whereHelperstring{field: "\"oidc_issuers\".\"client_id\""},
	SubjectClaim: whereHelperstring{field: "\"oidc_issuers\".\"subject_claim\""},
	EmailClaim:   whereHelperstring{field: "\"oidc_issuers\".\"email_claim\""},
	NameClaim:    whereHelperstring{field: "\"oidc_issuers\".\"name_claim\""},
	CreatedAt:    whereHelpertime_Time{field: "\"oidc_issuers\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"oidc_issuers\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"oidc_issuers\".\"deleted_at\""},
}

// OidcIssuerRels is where relationship names are stored.
var OidcIssuerRels = struct {
	Tenant string
	Users  string
}{
	Tenant: "Tenant",
	Users:  "Users",
}

// oidcIssuerR is where relationships are stored.
type oidcIssuerR struct {
	Tenant *Tenant   `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	Users  UserSlice `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*oidcIssuerR) NewStruct() *oidcIssuerR {
	return &oidcIssuerR{}
}

func (r *oidcIssuerR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.Tenant
}

func (r *oidcIssuerR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// oidcIssuerL is where Load methods for each relationship are stored.
type oidcIssuerL struct{}

var (
	oidcIssuerAllColumns            = []string{"id", "name", "tenant_id", "uri", "audience", "client_id", "subject_claim", "email_claim", "name_claim", "created_at", "updated_at", "deleted_at"}
	oidcIssuerColumnsWithoutDefault = []string{"name", "tenant_id", "uri", "audience", "client_id", "created_at", "updated_at"}
	oidcIssuerColumnsWithDefault    = []string{"id", "subject_claim", "email_claim", "name_claim", "deleted_at"}
	oidcIssuerPrimaryKeyColumns     = []string{"id"}
	oidcIssuerGeneratedColumns      = []string{}
)

type (
	// OidcIssuerSlice is an alias for a slice of pointers to OidcIssuer.
	// This should almost always be used instead of []OidcIssuer.
	OidcIssuerSlice []*OidcIssuer
	// OidcIssuerHook is the signature for custom OidcIssuer hook methods
	OidcIssuerHook func(context.Context, boil.ContextExecutor, *OidcIssuer) error

	oidcIssuerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oidcIssuerType                 = reflect.TypeOf(&OidcIssuer{})
	oidcIssuerMapping              = queries.MakeStructMapping(oidcIssuerType)
	oidcIssuerPrimaryKeyMapping, _ = queries.BindMapping(oidcIssuerType, oidcIssuerMapping, oidcIssuerPrimaryKeyColumns)
	oidcIssuerInsertCacheMut       sync.RWMutex
	oidcIssuerInsertCache          = make(map[string]insertCache)
	oidcIssuerUpdateCacheMut       sync.RWMutex
	oidcIssuerUpdateCache          = make(map[string]updateCache)
	oidcIssuerUpsertCacheMut       sync.RWMutex
	oidcIssuerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oidcIssuerAfterSelectHooks []OidcIssuerHook

var oidcIssuerBeforeInsertHooks []OidcIssuerHook
var oidcIssuerAfterInsertHooks []OidcIssuerHook

var oidcIssuerBeforeUpdateHooks []OidcIssuerHook
var oidcIssuerAfterUpdateHooks []OidcIssuerHook

var oidcIssuerBeforeDeleteHooks []OidcIssuerHook
var oidcIssuerAfterDeleteHooks []OidcIssuerHook

var oidcIssuerBeforeUpsertHooks []OidcIssuerHook
var oidcIssuerAfterUpsertHooks []OidcIssuerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OidcIssuer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OidcIssuer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OidcIssuer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OidcIssuer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OidcIssuer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OidcIssuer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OidcIssuer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OidcIssuer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OidcIssuer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcIssuerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOidcIssuerHook registers your hook function for all future operations.
func AddOidcIssuerHook(hookPoint boil.HookPoint, oidcIssuerHook OidcIssuerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		oidcIssuerAfterSelectHooks = append(oidcIssuerAfterSelectHooks, oidcIssuerHook)
	case boil.BeforeInsertHook:
		oidcIssuerBeforeInsertHooks = append(oidcIssuerBeforeInsertHooks, oidcIssuerHook)
	case boil.AfterInsertHook:
		oidcIssuerAfterInsertHooks = append(oidcIssuerAfterInsertHooks, oidcIssuerHook)
	case boil.BeforeUpdateHook:
		oidcIssuerBeforeUpdateHooks = append(oidcIssuerBeforeUpdateHooks, oidcIssuerHook)
	case boil.AfterUpdateHook:
		oidcIssuerAfterUpdateHooks = append(oidcIssuerAfterUpdateHooks, oidcIssuerHook)
	case boil.BeforeDeleteHook:
		oidcIssuerBeforeDeleteHooks = append(oidcIssuerBeforeDeleteHooks, oidcIssuerHook)
	case boil.AfterDeleteHook:
		oidcIssuerAfterDeleteHooks = append(oidcIssuerAfterDeleteHooks, oidcIssuerHook)
	case boil.BeforeUpsertHook:
		oidcIssuerBeforeUpsertHooks = append(oidcIssuerBeforeUpsertHooks, oidcIssuerHook)
	case boil.AfterUpsertHook:
		oidcIssuerAfterUpsertHooks = append(oidcIssuerAfterUpsertHooks, oidcIssuerHook)
	}
}

// One returns a single oidcIssuer record from the query.
func (q oidcIssuerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OidcIssuer, error) {
	o := &OidcIssuer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for oidc_issuers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OidcIssuer records from the query.
func (q oidcIssuerQuery) All(ctx context.Context, exec boil.ContextExecutor) (OidcIssuerSlice, error) {
	var o []*OidcIssuer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OidcIssuer slice")
	}

	if len(oidcIssuerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OidcIssuer records in the query.
func (q oidcIssuerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count oidc_issuers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oidcIssuerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if oidc_issuers exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *OidcIssuer) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *OidcIssuer) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"oidc_issuer_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (oidcIssuerL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOidcIssuer interface{}, mods queries.Applicator) error {
	var slice []*OidcIssuer
	var object *OidcIssuer

	if singular {
		var ok bool
		object, ok = maybeOidcIssuer.(*OidcIssuer)
		if !ok {
			object = new(OidcIssuer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOidcIssuer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOidcIssuer))
			}
		}
	} else {
		s, ok := maybeOidcIssuer.(*[]*OidcIssuer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOidcIssuer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOidcIssuer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &oidcIssuerR{}
		}
		args = append(args, object.TenantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oidcIssuerR{}
			}

			for _, a := range args {
				if a == obj.TenantID {
					continue Outer
				}
			}

			args = append(args, obj.TenantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, args...),
		qmhelper.WhereIsNull(`tenants.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(oidcIssuerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.OidcIssuers = append(foreign.R.OidcIssuers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.OidcIssuers = append(foreign.R.OidcIssuers, local)
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (oidcIssuerL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOidcIssuer interface{}, mods queries.Applicator) error {
	var slice []*OidcIssuer
	var object *OidcIssuer

	if singular {
		var ok bool
		object, ok = maybeOidcIssuer.(*OidcIssuer)
		if !ok {
			object = new(OidcIssuer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOidcIssuer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOidcIssuer))
			}
		}
	} else {
		s, ok := maybeOidcIssuer.(*[]*OidcIssuer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOidcIssuer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOidcIssuer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &oidcIssuerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oidcIssuerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.oidc_issuer_id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.OidcIssuer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OidcIssuerID {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OidcIssuer = local
				break
			}
		}
	}

	return nil
}

// SetTenant of the oidcIssuer to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.OidcIssuers.
func (o *OidcIssuer) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"oidc_issuers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, oidcIssuerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &oidcIssuerR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			OidcIssuers: OidcIssuerSlice{o},
		}
	} else {
		related.R.OidcIssuers = append(related.R.OidcIssuers, o)
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the oidc_issuer, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.OidcIssuer appropriately.
func (o *OidcIssuer) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OidcIssuerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"oidc_issuer_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OidcIssuerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &oidcIssuerR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				OidcIssuer: o,
			}
		} else {
			rel.R.OidcIssuer = o
		}
	}
	return nil
}

// OidcIssuers retrieves all the records using an executor.
func OidcIssuers(mods ...qm.QueryMod) oidcIssuerQuery {
	mods = append(mods, qm.From("\"oidc_issuers\""), qmhelper.WhereIsNull("\"oidc_issuers\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"oidc_issuers\".*"})
	}

	return oidcIssuerQuery{q}
}

// FindOidcIssuer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOidcIssuer(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OidcIssuer, error) {
	oidcIssuerObj := &OidcIssuer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"oidc_issuers\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, oidcIssuerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from oidc_issuers")
	}

	if err = oidcIssuerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return oidcIssuerObj, err
	}

	return oidcIssuerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OidcIssuer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oidc_issuers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oidcIssuerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oidcIssuerInsertCacheMut.RLock()
	cache, cached := oidcIssuerInsertCache[key]
	oidcIssuerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oidcIssuerAllColumns,
			oidcIssuerColumnsWithDefault,
			oidcIssuerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oidcIssuerType, oidcIssuerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oidcIssuerType, oidcIssuerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"oidc_issuers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"oidc_issuers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into oidc_issuers")
	}

	if !cached {
		oidcIssuerInsertCacheMut.Lock()
		oidcIssuerInsertCache[key] = cache
		oidcIssuerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OidcIssuer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OidcIssuer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oidcIssuerUpdateCacheMut.RLock()
	cache, cached := oidcIssuerUpdateCache[key]
	oidcIssuerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oidcIssuerAllColumns,
			oidcIssuerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update oidc_issuers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"oidc_issuers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, oidcIssuerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oidcIssuerType, oidcIssuerMapping, append(wl, oidcIssuerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update oidc_issuers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for oidc_issuers")
	}

	if !cached {
		oidcIssuerUpdateCacheMut.Lock()
		oidcIssuerUpdateCache[key] = cache
		oidcIssuerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oidcIssuerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for oidc_issuers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for oidc_issuers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OidcIssuerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcIssuerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"oidc_issuers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, oidcIssuerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in oidcIssuer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all oidcIssuer")
	}
	return rowsAff, nil
}

// Delete deletes a single OidcIssuer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OidcIssuer) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OidcIssuer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oidcIssuerPrimaryKeyMapping)
		sql = "DELETE FROM \"oidc_issuers\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"oidc_issuers\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(oidcIssuerType, oidcIssuerMapping, append(wl, oidcIssuerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from oidc_issuers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for oidc_issuers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oidcIssuerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no oidcIssuerQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oidc_issuers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oidc_issuers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OidcIssuerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oidcIssuerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcIssuerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"oidc_issuers\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oidcIssuerPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcIssuerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"oidc_issuers\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, oidcIssuerPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oidcIssuer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oidc_issuers")
	}

	if len(oidcIssuerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OidcIssuer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOidcIssuer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OidcIssuerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OidcIssuerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcIssuerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"oidc_issuers\".* FROM \"oidc_issuers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oidcIssuerPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OidcIssuerSlice")
	}

	*o = slice

	return nil
}

// OidcIssuerExists checks if the OidcIssuer row exists.
func OidcIssuerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"oidc_issuers\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if oidc_issuers exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OidcIssuer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oidc_issuers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oidcIssuerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oidcIssuerUpsertCacheMut.RLock()
	cache, cached := oidcIssuerUpsertCache[key]
	oidcIssuerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			oidcIssuerAllColumns,
			oidcIssuerColumnsWithDefault,
			oidcIssuerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			oidcIssuerAllColumns,
			oidcIssuerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert oidc_issuers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(oidcIssuerPrimaryKeyColumns))
			copy(conflict, oidcIssuerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"oidc_issuers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(oidcIssuerType, oidcIssuerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oidcIssuerType, oidcIssuerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert oidc_issuers")
	}

	if !cached {
		oidcIssuerUpsertCacheMut.Lock()
		oidcIssuerUpsertCache[key] = cache
		oidcIssuerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
